{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Adapter = void 0;\n\nconst events_1 = require(\"events\");\n\nclass Adapter extends events_1.EventEmitter {\n  /**\n   * In-memory adapter constructor.\n   *\n   * @param {Namespace} nsp\n   */\n  constructor(nsp) {\n    super();\n    this.nsp = nsp;\n    this.rooms = new Map();\n    this.sids = new Map();\n    this.encoder = nsp.server.encoder;\n  }\n  /**\n   * To be overridden\n   */\n\n\n  init() {}\n  /**\n   * To be overridden\n   */\n\n\n  close() {}\n  /**\n   * Adds a socket to a list of room.\n   *\n   * @param {SocketId}  id      the socket id\n   * @param {Set<Room>} rooms   a set of rooms\n   * @public\n   */\n\n\n  addAll(id, rooms) {\n    if (!this.sids.has(id)) {\n      this.sids.set(id, new Set());\n    }\n\n    for (const room of rooms) {\n      this.sids.get(id).add(room);\n\n      if (!this.rooms.has(room)) {\n        this.rooms.set(room, new Set());\n        this.emit(\"create-room\", room);\n      }\n\n      if (!this.rooms.get(room).has(id)) {\n        this.rooms.get(room).add(id);\n        this.emit(\"join-room\", room, id);\n      }\n    }\n  }\n  /**\n   * Removes a socket from a room.\n   *\n   * @param {SocketId} id     the socket id\n   * @param {Room}     room   the room name\n   */\n\n\n  del(id, room) {\n    if (this.sids.has(id)) {\n      this.sids.get(id).delete(room);\n    }\n\n    this._del(room, id);\n  }\n\n  _del(room, id) {\n    if (this.rooms.has(room)) {\n      const deleted = this.rooms.get(room).delete(id);\n\n      if (deleted) {\n        this.emit(\"leave-room\", room, id);\n      }\n\n      if (this.rooms.get(room).size === 0) {\n        this.rooms.delete(room);\n        this.emit(\"delete-room\", room);\n      }\n    }\n  }\n  /**\n   * Removes a socket from all rooms it's joined.\n   *\n   * @param {SocketId} id   the socket id\n   */\n\n\n  delAll(id) {\n    if (!this.sids.has(id)) {\n      return;\n    }\n\n    for (const room of this.sids.get(id)) {\n      this._del(room, id);\n    }\n\n    this.sids.delete(id);\n  }\n  /**\n   * Broadcasts a packet.\n   *\n   * Options:\n   *  - `flags` {Object} flags for this packet\n   *  - `except` {Array} sids that should be excluded\n   *  - `rooms` {Array} list of rooms to broadcast to\n   *\n   * @param {Object} packet   the packet object\n   * @param {Object} opts     the options\n   * @public\n   */\n\n\n  broadcast(packet, opts) {\n    const flags = opts.flags || {};\n    const basePacketOpts = {\n      preEncoded: true,\n      volatile: flags.volatile,\n      compress: flags.compress\n    };\n    packet.nsp = this.nsp.name;\n    const encodedPackets = this.encoder.encode(packet);\n    const packetOpts = encodedPackets.map(encodedPacket => {\n      if (typeof encodedPacket === \"string\") {\n        return Object.assign(Object.assign({}, basePacketOpts), {\n          wsPreEncoded: \"4\" + encodedPacket // \"4\" being the \"message\" packet type in Engine.IO\n\n        });\n      } else {\n        return basePacketOpts;\n      }\n    });\n    this.apply(opts, socket => {\n      for (let i = 0; i < encodedPackets.length; i++) {\n        socket.client.writeToEngine(encodedPackets[i], packetOpts[i]);\n      }\n    });\n  }\n  /**\n   * Gets a list of sockets by sid.\n   *\n   * @param {Set<Room>} rooms   the explicit set of rooms to check.\n   */\n\n\n  sockets(rooms) {\n    const sids = new Set();\n    this.apply({\n      rooms\n    }, socket => {\n      sids.add(socket.id);\n    });\n    return Promise.resolve(sids);\n  }\n  /**\n   * Gets the list of rooms a given socket has joined.\n   *\n   * @param {SocketId} id   the socket id\n   */\n\n\n  socketRooms(id) {\n    return this.sids.get(id);\n  }\n  /**\n   * Returns the matching socket instances\n   *\n   * @param opts - the filters to apply\n   */\n\n\n  fetchSockets(opts) {\n    const sockets = [];\n    this.apply(opts, socket => {\n      sockets.push(socket);\n    });\n    return Promise.resolve(sockets);\n  }\n  /**\n   * Makes the matching socket instances join the specified rooms\n   *\n   * @param opts - the filters to apply\n   * @param rooms - the rooms to join\n   */\n\n\n  addSockets(opts, rooms) {\n    this.apply(opts, socket => {\n      socket.join(rooms);\n    });\n  }\n  /**\n   * Makes the matching socket instances leave the specified rooms\n   *\n   * @param opts - the filters to apply\n   * @param rooms - the rooms to leave\n   */\n\n\n  delSockets(opts, rooms) {\n    this.apply(opts, socket => {\n      rooms.forEach(room => socket.leave(room));\n    });\n  }\n  /**\n   * Makes the matching socket instances disconnect\n   *\n   * @param opts - the filters to apply\n   * @param close - whether to close the underlying connection\n   */\n\n\n  disconnectSockets(opts, close) {\n    this.apply(opts, socket => {\n      socket.disconnect(close);\n    });\n  }\n\n  apply(opts, callback) {\n    const rooms = opts.rooms;\n    const except = this.computeExceptSids(opts.except);\n\n    if (rooms.size) {\n      const ids = new Set();\n\n      for (const room of rooms) {\n        if (!this.rooms.has(room)) continue;\n\n        for (const id of this.rooms.get(room)) {\n          if (ids.has(id) || except.has(id)) continue;\n          const socket = this.nsp.sockets.get(id);\n\n          if (socket) {\n            callback(socket);\n            ids.add(id);\n          }\n        }\n      }\n    } else {\n      for (const [id] of this.sids) {\n        if (except.has(id)) continue;\n        const socket = this.nsp.sockets.get(id);\n        if (socket) callback(socket);\n      }\n    }\n  }\n\n  computeExceptSids(exceptRooms) {\n    const exceptSids = new Set();\n\n    if (exceptRooms && exceptRooms.size > 0) {\n      for (const room of exceptRooms) {\n        if (this.rooms.has(room)) {\n          this.rooms.get(room).forEach(sid => exceptSids.add(sid));\n        }\n      }\n    }\n\n    return exceptSids;\n  }\n  /**\n   * Send a packet to the other Socket.IO servers in the cluster\n   * @param packet - an array of arguments, which may include an acknowledgement callback at the end\n   */\n\n\n  serverSideEmit(packet) {\n    throw new Error(\"this adapter does not support the serverSideEmit() functionality\");\n  }\n\n}\n\nexports.Adapter = Adapter;","map":{"version":3,"sources":["/home/krishnadevz/redocs/client/node_modules/socket.io-adapter/dist/index.js"],"names":["Object","defineProperty","exports","value","Adapter","events_1","require","EventEmitter","constructor","nsp","rooms","Map","sids","encoder","server","init","close","addAll","id","has","set","Set","room","get","add","emit","del","delete","_del","deleted","size","delAll","broadcast","packet","opts","flags","basePacketOpts","preEncoded","volatile","compress","name","encodedPackets","encode","packetOpts","map","encodedPacket","assign","wsPreEncoded","apply","socket","i","length","client","writeToEngine","sockets","Promise","resolve","socketRooms","fetchSockets","push","addSockets","join","delSockets","forEach","leave","disconnectSockets","disconnect","callback","except","computeExceptSids","ids","exceptRooms","exceptSids","sid","serverSideEmit","Error"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AACA,MAAMC,QAAQ,GAAGC,OAAO,CAAC,QAAD,CAAxB;;AACA,MAAMF,OAAN,SAAsBC,QAAQ,CAACE,YAA/B,CAA4C;AACxC;AACJ;AACA;AACA;AACA;AACIC,EAAAA,WAAW,CAACC,GAAD,EAAM;AACb;AACA,SAAKA,GAAL,GAAWA,GAAX;AACA,SAAKC,KAAL,GAAa,IAAIC,GAAJ,EAAb;AACA,SAAKC,IAAL,GAAY,IAAID,GAAJ,EAAZ;AACA,SAAKE,OAAL,GAAeJ,GAAG,CAACK,MAAJ,CAAWD,OAA1B;AACH;AACD;AACJ;AACA;;;AACIE,EAAAA,IAAI,GAAG,CAAG;AACV;AACJ;AACA;;;AACIC,EAAAA,KAAK,GAAG,CAAG;AACX;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIC,EAAAA,MAAM,CAACC,EAAD,EAAKR,KAAL,EAAY;AACd,QAAI,CAAC,KAAKE,IAAL,CAAUO,GAAV,CAAcD,EAAd,CAAL,EAAwB;AACpB,WAAKN,IAAL,CAAUQ,GAAV,CAAcF,EAAd,EAAkB,IAAIG,GAAJ,EAAlB;AACH;;AACD,SAAK,MAAMC,IAAX,IAAmBZ,KAAnB,EAA0B;AACtB,WAAKE,IAAL,CAAUW,GAAV,CAAcL,EAAd,EAAkBM,GAAlB,CAAsBF,IAAtB;;AACA,UAAI,CAAC,KAAKZ,KAAL,CAAWS,GAAX,CAAeG,IAAf,CAAL,EAA2B;AACvB,aAAKZ,KAAL,CAAWU,GAAX,CAAeE,IAAf,EAAqB,IAAID,GAAJ,EAArB;AACA,aAAKI,IAAL,CAAU,aAAV,EAAyBH,IAAzB;AACH;;AACD,UAAI,CAAC,KAAKZ,KAAL,CAAWa,GAAX,CAAeD,IAAf,EAAqBH,GAArB,CAAyBD,EAAzB,CAAL,EAAmC;AAC/B,aAAKR,KAAL,CAAWa,GAAX,CAAeD,IAAf,EAAqBE,GAArB,CAAyBN,EAAzB;AACA,aAAKO,IAAL,CAAU,WAAV,EAAuBH,IAAvB,EAA6BJ,EAA7B;AACH;AACJ;AACJ;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACIQ,EAAAA,GAAG,CAACR,EAAD,EAAKI,IAAL,EAAW;AACV,QAAI,KAAKV,IAAL,CAAUO,GAAV,CAAcD,EAAd,CAAJ,EAAuB;AACnB,WAAKN,IAAL,CAAUW,GAAV,CAAcL,EAAd,EAAkBS,MAAlB,CAAyBL,IAAzB;AACH;;AACD,SAAKM,IAAL,CAAUN,IAAV,EAAgBJ,EAAhB;AACH;;AACDU,EAAAA,IAAI,CAACN,IAAD,EAAOJ,EAAP,EAAW;AACX,QAAI,KAAKR,KAAL,CAAWS,GAAX,CAAeG,IAAf,CAAJ,EAA0B;AACtB,YAAMO,OAAO,GAAG,KAAKnB,KAAL,CAAWa,GAAX,CAAeD,IAAf,EAAqBK,MAArB,CAA4BT,EAA5B,CAAhB;;AACA,UAAIW,OAAJ,EAAa;AACT,aAAKJ,IAAL,CAAU,YAAV,EAAwBH,IAAxB,EAA8BJ,EAA9B;AACH;;AACD,UAAI,KAAKR,KAAL,CAAWa,GAAX,CAAeD,IAAf,EAAqBQ,IAArB,KAA8B,CAAlC,EAAqC;AACjC,aAAKpB,KAAL,CAAWiB,MAAX,CAAkBL,IAAlB;AACA,aAAKG,IAAL,CAAU,aAAV,EAAyBH,IAAzB;AACH;AACJ;AACJ;AACD;AACJ;AACA;AACA;AACA;;;AACIS,EAAAA,MAAM,CAACb,EAAD,EAAK;AACP,QAAI,CAAC,KAAKN,IAAL,CAAUO,GAAV,CAAcD,EAAd,CAAL,EAAwB;AACpB;AACH;;AACD,SAAK,MAAMI,IAAX,IAAmB,KAAKV,IAAL,CAAUW,GAAV,CAAcL,EAAd,CAAnB,EAAsC;AAClC,WAAKU,IAAL,CAAUN,IAAV,EAAgBJ,EAAhB;AACH;;AACD,SAAKN,IAAL,CAAUe,MAAV,CAAiBT,EAAjB;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIc,EAAAA,SAAS,CAACC,MAAD,EAASC,IAAT,EAAe;AACpB,UAAMC,KAAK,GAAGD,IAAI,CAACC,KAAL,IAAc,EAA5B;AACA,UAAMC,cAAc,GAAG;AACnBC,MAAAA,UAAU,EAAE,IADO;AAEnBC,MAAAA,QAAQ,EAAEH,KAAK,CAACG,QAFG;AAGnBC,MAAAA,QAAQ,EAAEJ,KAAK,CAACI;AAHG,KAAvB;AAKAN,IAAAA,MAAM,CAACxB,GAAP,GAAa,KAAKA,GAAL,CAAS+B,IAAtB;AACA,UAAMC,cAAc,GAAG,KAAK5B,OAAL,CAAa6B,MAAb,CAAoBT,MAApB,CAAvB;AACA,UAAMU,UAAU,GAAGF,cAAc,CAACG,GAAf,CAAmBC,aAAa,IAAI;AACnD,UAAI,OAAOA,aAAP,KAAyB,QAA7B,EAAuC;AACnC,eAAO7C,MAAM,CAAC8C,MAAP,CAAc9C,MAAM,CAAC8C,MAAP,CAAc,EAAd,EAAkBV,cAAlB,CAAd,EAAiD;AAAEW,UAAAA,YAAY,EAAE,MAAMF,aAAtB,CAAoC;;AAApC,SAAjD,CAAP;AAEH,OAHD,MAIK;AACD,eAAOT,cAAP;AACH;AACJ,KARkB,CAAnB;AASA,SAAKY,KAAL,CAAWd,IAAX,EAAiBe,MAAM,IAAI;AACvB,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,cAAc,CAACU,MAAnC,EAA2CD,CAAC,EAA5C,EAAgD;AAC5CD,QAAAA,MAAM,CAACG,MAAP,CAAcC,aAAd,CAA4BZ,cAAc,CAACS,CAAD,CAA1C,EAA+CP,UAAU,CAACO,CAAD,CAAzD;AACH;AACJ,KAJD;AAKH;AACD;AACJ;AACA;AACA;AACA;;;AACII,EAAAA,OAAO,CAAC5C,KAAD,EAAQ;AACX,UAAME,IAAI,GAAG,IAAIS,GAAJ,EAAb;AACA,SAAK2B,KAAL,CAAW;AAAEtC,MAAAA;AAAF,KAAX,EAAsBuC,MAAM,IAAI;AAC5BrC,MAAAA,IAAI,CAACY,GAAL,CAASyB,MAAM,CAAC/B,EAAhB;AACH,KAFD;AAGA,WAAOqC,OAAO,CAACC,OAAR,CAAgB5C,IAAhB,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACI6C,EAAAA,WAAW,CAACvC,EAAD,EAAK;AACZ,WAAO,KAAKN,IAAL,CAAUW,GAAV,CAAcL,EAAd,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACIwC,EAAAA,YAAY,CAACxB,IAAD,EAAO;AACf,UAAMoB,OAAO,GAAG,EAAhB;AACA,SAAKN,KAAL,CAAWd,IAAX,EAAiBe,MAAM,IAAI;AACvBK,MAAAA,OAAO,CAACK,IAAR,CAAaV,MAAb;AACH,KAFD;AAGA,WAAOM,OAAO,CAACC,OAAR,CAAgBF,OAAhB,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACIM,EAAAA,UAAU,CAAC1B,IAAD,EAAOxB,KAAP,EAAc;AACpB,SAAKsC,KAAL,CAAWd,IAAX,EAAiBe,MAAM,IAAI;AACvBA,MAAAA,MAAM,CAACY,IAAP,CAAYnD,KAAZ;AACH,KAFD;AAGH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACIoD,EAAAA,UAAU,CAAC5B,IAAD,EAAOxB,KAAP,EAAc;AACpB,SAAKsC,KAAL,CAAWd,IAAX,EAAiBe,MAAM,IAAI;AACvBvC,MAAAA,KAAK,CAACqD,OAAN,CAAczC,IAAI,IAAI2B,MAAM,CAACe,KAAP,CAAa1C,IAAb,CAAtB;AACH,KAFD;AAGH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACI2C,EAAAA,iBAAiB,CAAC/B,IAAD,EAAOlB,KAAP,EAAc;AAC3B,SAAKgC,KAAL,CAAWd,IAAX,EAAiBe,MAAM,IAAI;AACvBA,MAAAA,MAAM,CAACiB,UAAP,CAAkBlD,KAAlB;AACH,KAFD;AAGH;;AACDgC,EAAAA,KAAK,CAACd,IAAD,EAAOiC,QAAP,EAAiB;AAClB,UAAMzD,KAAK,GAAGwB,IAAI,CAACxB,KAAnB;AACA,UAAM0D,MAAM,GAAG,KAAKC,iBAAL,CAAuBnC,IAAI,CAACkC,MAA5B,CAAf;;AACA,QAAI1D,KAAK,CAACoB,IAAV,EAAgB;AACZ,YAAMwC,GAAG,GAAG,IAAIjD,GAAJ,EAAZ;;AACA,WAAK,MAAMC,IAAX,IAAmBZ,KAAnB,EAA0B;AACtB,YAAI,CAAC,KAAKA,KAAL,CAAWS,GAAX,CAAeG,IAAf,CAAL,EACI;;AACJ,aAAK,MAAMJ,EAAX,IAAiB,KAAKR,KAAL,CAAWa,GAAX,CAAeD,IAAf,CAAjB,EAAuC;AACnC,cAAIgD,GAAG,CAACnD,GAAJ,CAAQD,EAAR,KAAekD,MAAM,CAACjD,GAAP,CAAWD,EAAX,CAAnB,EACI;AACJ,gBAAM+B,MAAM,GAAG,KAAKxC,GAAL,CAAS6C,OAAT,CAAiB/B,GAAjB,CAAqBL,EAArB,CAAf;;AACA,cAAI+B,MAAJ,EAAY;AACRkB,YAAAA,QAAQ,CAAClB,MAAD,CAAR;AACAqB,YAAAA,GAAG,CAAC9C,GAAJ,CAAQN,EAAR;AACH;AACJ;AACJ;AACJ,KAfD,MAgBK;AACD,WAAK,MAAM,CAACA,EAAD,CAAX,IAAmB,KAAKN,IAAxB,EAA8B;AAC1B,YAAIwD,MAAM,CAACjD,GAAP,CAAWD,EAAX,CAAJ,EACI;AACJ,cAAM+B,MAAM,GAAG,KAAKxC,GAAL,CAAS6C,OAAT,CAAiB/B,GAAjB,CAAqBL,EAArB,CAAf;AACA,YAAI+B,MAAJ,EACIkB,QAAQ,CAAClB,MAAD,CAAR;AACP;AACJ;AACJ;;AACDoB,EAAAA,iBAAiB,CAACE,WAAD,EAAc;AAC3B,UAAMC,UAAU,GAAG,IAAInD,GAAJ,EAAnB;;AACA,QAAIkD,WAAW,IAAIA,WAAW,CAACzC,IAAZ,GAAmB,CAAtC,EAAyC;AACrC,WAAK,MAAMR,IAAX,IAAmBiD,WAAnB,EAAgC;AAC5B,YAAI,KAAK7D,KAAL,CAAWS,GAAX,CAAeG,IAAf,CAAJ,EAA0B;AACtB,eAAKZ,KAAL,CAAWa,GAAX,CAAeD,IAAf,EAAqByC,OAArB,CAA6BU,GAAG,IAAID,UAAU,CAAChD,GAAX,CAAeiD,GAAf,CAApC;AACH;AACJ;AACJ;;AACD,WAAOD,UAAP;AACH;AACD;AACJ;AACA;AACA;;;AACIE,EAAAA,cAAc,CAACzC,MAAD,EAAS;AACnB,UAAM,IAAI0C,KAAJ,CAAU,kEAAV,CAAN;AACH;;AArOuC;;AAuO5CzE,OAAO,CAACE,OAAR,GAAkBA,OAAlB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Adapter = void 0;\nconst events_1 = require(\"events\");\nclass Adapter extends events_1.EventEmitter {\n    /**\n     * In-memory adapter constructor.\n     *\n     * @param {Namespace} nsp\n     */\n    constructor(nsp) {\n        super();\n        this.nsp = nsp;\n        this.rooms = new Map();\n        this.sids = new Map();\n        this.encoder = nsp.server.encoder;\n    }\n    /**\n     * To be overridden\n     */\n    init() { }\n    /**\n     * To be overridden\n     */\n    close() { }\n    /**\n     * Adds a socket to a list of room.\n     *\n     * @param {SocketId}  id      the socket id\n     * @param {Set<Room>} rooms   a set of rooms\n     * @public\n     */\n    addAll(id, rooms) {\n        if (!this.sids.has(id)) {\n            this.sids.set(id, new Set());\n        }\n        for (const room of rooms) {\n            this.sids.get(id).add(room);\n            if (!this.rooms.has(room)) {\n                this.rooms.set(room, new Set());\n                this.emit(\"create-room\", room);\n            }\n            if (!this.rooms.get(room).has(id)) {\n                this.rooms.get(room).add(id);\n                this.emit(\"join-room\", room, id);\n            }\n        }\n    }\n    /**\n     * Removes a socket from a room.\n     *\n     * @param {SocketId} id     the socket id\n     * @param {Room}     room   the room name\n     */\n    del(id, room) {\n        if (this.sids.has(id)) {\n            this.sids.get(id).delete(room);\n        }\n        this._del(room, id);\n    }\n    _del(room, id) {\n        if (this.rooms.has(room)) {\n            const deleted = this.rooms.get(room).delete(id);\n            if (deleted) {\n                this.emit(\"leave-room\", room, id);\n            }\n            if (this.rooms.get(room).size === 0) {\n                this.rooms.delete(room);\n                this.emit(\"delete-room\", room);\n            }\n        }\n    }\n    /**\n     * Removes a socket from all rooms it's joined.\n     *\n     * @param {SocketId} id   the socket id\n     */\n    delAll(id) {\n        if (!this.sids.has(id)) {\n            return;\n        }\n        for (const room of this.sids.get(id)) {\n            this._del(room, id);\n        }\n        this.sids.delete(id);\n    }\n    /**\n     * Broadcasts a packet.\n     *\n     * Options:\n     *  - `flags` {Object} flags for this packet\n     *  - `except` {Array} sids that should be excluded\n     *  - `rooms` {Array} list of rooms to broadcast to\n     *\n     * @param {Object} packet   the packet object\n     * @param {Object} opts     the options\n     * @public\n     */\n    broadcast(packet, opts) {\n        const flags = opts.flags || {};\n        const basePacketOpts = {\n            preEncoded: true,\n            volatile: flags.volatile,\n            compress: flags.compress\n        };\n        packet.nsp = this.nsp.name;\n        const encodedPackets = this.encoder.encode(packet);\n        const packetOpts = encodedPackets.map(encodedPacket => {\n            if (typeof encodedPacket === \"string\") {\n                return Object.assign(Object.assign({}, basePacketOpts), { wsPreEncoded: \"4\" + encodedPacket // \"4\" being the \"message\" packet type in Engine.IO\n                 });\n            }\n            else {\n                return basePacketOpts;\n            }\n        });\n        this.apply(opts, socket => {\n            for (let i = 0; i < encodedPackets.length; i++) {\n                socket.client.writeToEngine(encodedPackets[i], packetOpts[i]);\n            }\n        });\n    }\n    /**\n     * Gets a list of sockets by sid.\n     *\n     * @param {Set<Room>} rooms   the explicit set of rooms to check.\n     */\n    sockets(rooms) {\n        const sids = new Set();\n        this.apply({ rooms }, socket => {\n            sids.add(socket.id);\n        });\n        return Promise.resolve(sids);\n    }\n    /**\n     * Gets the list of rooms a given socket has joined.\n     *\n     * @param {SocketId} id   the socket id\n     */\n    socketRooms(id) {\n        return this.sids.get(id);\n    }\n    /**\n     * Returns the matching socket instances\n     *\n     * @param opts - the filters to apply\n     */\n    fetchSockets(opts) {\n        const sockets = [];\n        this.apply(opts, socket => {\n            sockets.push(socket);\n        });\n        return Promise.resolve(sockets);\n    }\n    /**\n     * Makes the matching socket instances join the specified rooms\n     *\n     * @param opts - the filters to apply\n     * @param rooms - the rooms to join\n     */\n    addSockets(opts, rooms) {\n        this.apply(opts, socket => {\n            socket.join(rooms);\n        });\n    }\n    /**\n     * Makes the matching socket instances leave the specified rooms\n     *\n     * @param opts - the filters to apply\n     * @param rooms - the rooms to leave\n     */\n    delSockets(opts, rooms) {\n        this.apply(opts, socket => {\n            rooms.forEach(room => socket.leave(room));\n        });\n    }\n    /**\n     * Makes the matching socket instances disconnect\n     *\n     * @param opts - the filters to apply\n     * @param close - whether to close the underlying connection\n     */\n    disconnectSockets(opts, close) {\n        this.apply(opts, socket => {\n            socket.disconnect(close);\n        });\n    }\n    apply(opts, callback) {\n        const rooms = opts.rooms;\n        const except = this.computeExceptSids(opts.except);\n        if (rooms.size) {\n            const ids = new Set();\n            for (const room of rooms) {\n                if (!this.rooms.has(room))\n                    continue;\n                for (const id of this.rooms.get(room)) {\n                    if (ids.has(id) || except.has(id))\n                        continue;\n                    const socket = this.nsp.sockets.get(id);\n                    if (socket) {\n                        callback(socket);\n                        ids.add(id);\n                    }\n                }\n            }\n        }\n        else {\n            for (const [id] of this.sids) {\n                if (except.has(id))\n                    continue;\n                const socket = this.nsp.sockets.get(id);\n                if (socket)\n                    callback(socket);\n            }\n        }\n    }\n    computeExceptSids(exceptRooms) {\n        const exceptSids = new Set();\n        if (exceptRooms && exceptRooms.size > 0) {\n            for (const room of exceptRooms) {\n                if (this.rooms.has(room)) {\n                    this.rooms.get(room).forEach(sid => exceptSids.add(sid));\n                }\n            }\n        }\n        return exceptSids;\n    }\n    /**\n     * Send a packet to the other Socket.IO servers in the cluster\n     * @param packet - an array of arguments, which may include an acknowledgement callback at the end\n     */\n    serverSideEmit(packet) {\n        throw new Error(\"this adapter does not support the serverSideEmit() functionality\");\n    }\n}\nexports.Adapter = Adapter;\n"]},"metadata":{},"sourceType":"script"}