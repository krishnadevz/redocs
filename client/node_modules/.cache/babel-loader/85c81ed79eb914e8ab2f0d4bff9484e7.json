{"ast":null,"code":"const Transport = require(\"../transport\");\n\nconst debug = require(\"debug\")(\"engine:ws\");\n\nclass WebSocket extends Transport {\n  /**\n   * WebSocket transport\n   *\n   * @param {http.IncomingMessage}\n   * @api public\n   */\n  constructor(req) {\n    super(req);\n    this.socket = req.websocket;\n    this.socket.on(\"message\", this.onData.bind(this));\n    this.socket.once(\"close\", this.onClose.bind(this));\n    this.socket.on(\"error\", this.onError.bind(this));\n    this.writable = true;\n    this.perMessageDeflate = null;\n  }\n  /**\n   * Transport name\n   *\n   * @api public\n   */\n\n\n  get name() {\n    return \"websocket\";\n  }\n  /**\n   * Advertise upgrade support.\n   *\n   * @api public\n   */\n\n\n  get handlesUpgrades() {\n    return true;\n  }\n  /**\n   * Advertise framing support.\n   *\n   * @api public\n   */\n\n\n  get supportsFraming() {\n    return true;\n  }\n  /**\n   * Processes the incoming data.\n   *\n   * @param {String} encoded packet\n   * @api private\n   */\n\n\n  onData(data) {\n    debug('received \"%s\"', data);\n    super.onData(data);\n  }\n  /**\n   * Writes a packet payload.\n   *\n   * @param {Array} packets\n   * @api private\n   */\n\n\n  send(packets) {\n    const packet = packets.shift();\n\n    if (typeof packet === \"undefined\") {\n      this.writable = true;\n      this.emit(\"drain\");\n      return;\n    } // always creates a new object since ws modifies it\n\n\n    const opts = {};\n\n    if (packet.options) {\n      opts.compress = packet.options.compress;\n    }\n\n    const send = data => {\n      if (this.perMessageDeflate) {\n        const len = \"string\" === typeof data ? Buffer.byteLength(data) : data.length;\n\n        if (len < this.perMessageDeflate.threshold) {\n          opts.compress = false;\n        }\n      }\n\n      debug('writing \"%s\"', data);\n      this.writable = false;\n      this.socket.send(data, opts, err => {\n        if (err) return this.onError(\"write error\", err.stack);\n        this.send(packets);\n      });\n    };\n\n    if (packet.options && typeof packet.options.wsPreEncoded === \"string\") {\n      send(packet.options.wsPreEncoded);\n    } else {\n      this.parser.encodePacket(packet, this.supportsBinary, send);\n    }\n  }\n  /**\n   * Closes the transport.\n   *\n   * @api private\n   */\n\n\n  doClose(fn) {\n    debug(\"closing\");\n    this.socket.close();\n    fn && fn();\n  }\n\n}\n\nmodule.exports = WebSocket;","map":{"version":3,"sources":["/home/krishnadevz/redocs/client/node_modules/engine.io/lib/transports/websocket.js"],"names":["Transport","require","debug","WebSocket","constructor","req","socket","websocket","on","onData","bind","once","onClose","onError","writable","perMessageDeflate","name","handlesUpgrades","supportsFraming","data","send","packets","packet","shift","emit","opts","options","compress","len","Buffer","byteLength","length","threshold","err","stack","wsPreEncoded","parser","encodePacket","supportsBinary","doClose","fn","close","module","exports"],"mappings":"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","sourcesContent":["const Transport = require(\"../transport\");\nconst debug = require(\"debug\")(\"engine:ws\");\n\nclass WebSocket extends Transport {\n  /**\n   * WebSocket transport\n   *\n   * @param {http.IncomingMessage}\n   * @api public\n   */\n  constructor(req) {\n    super(req);\n    this.socket = req.websocket;\n    this.socket.on(\"message\", this.onData.bind(this));\n    this.socket.once(\"close\", this.onClose.bind(this));\n    this.socket.on(\"error\", this.onError.bind(this));\n    this.writable = true;\n    this.perMessageDeflate = null;\n  }\n\n  /**\n   * Transport name\n   *\n   * @api public\n   */\n  get name() {\n    return \"websocket\";\n  }\n\n  /**\n   * Advertise upgrade support.\n   *\n   * @api public\n   */\n  get handlesUpgrades() {\n    return true;\n  }\n\n  /**\n   * Advertise framing support.\n   *\n   * @api public\n   */\n  get supportsFraming() {\n    return true;\n  }\n\n  /**\n   * Processes the incoming data.\n   *\n   * @param {String} encoded packet\n   * @api private\n   */\n  onData(data) {\n    debug('received \"%s\"', data);\n    super.onData(data);\n  }\n\n  /**\n   * Writes a packet payload.\n   *\n   * @param {Array} packets\n   * @api private\n   */\n  send(packets) {\n    const packet = packets.shift();\n    if (typeof packet === \"undefined\") {\n      this.writable = true;\n      this.emit(\"drain\");\n      return;\n    }\n\n    // always creates a new object since ws modifies it\n    const opts = {};\n    if (packet.options) {\n      opts.compress = packet.options.compress;\n    }\n\n    const send = data => {\n      if (this.perMessageDeflate) {\n        const len =\n          \"string\" === typeof data ? Buffer.byteLength(data) : data.length;\n        if (len < this.perMessageDeflate.threshold) {\n          opts.compress = false;\n        }\n      }\n      debug('writing \"%s\"', data);\n      this.writable = false;\n\n      this.socket.send(data, opts, err => {\n        if (err) return this.onError(\"write error\", err.stack);\n        this.send(packets);\n      });\n    };\n\n    if (packet.options && typeof packet.options.wsPreEncoded === \"string\") {\n      send(packet.options.wsPreEncoded);\n    } else {\n      this.parser.encodePacket(packet, this.supportsBinary, send);\n    }\n  }\n\n  /**\n   * Closes the transport.\n   *\n   * @api private\n   */\n  doClose(fn) {\n    debug(\"closing\");\n    this.socket.close();\n    fn && fn();\n  }\n}\n\nmodule.exports = WebSocket;\n"]},"metadata":{},"sourceType":"script"}